/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_1 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] s,
    output reg [0:0] v,
    output reg [0:0] n,
    output reg [0:0] z
  );
  
  
  
  wire [16-1:0] M_adder1_s;
  reg [16-1:0] M_adder1_a;
  reg [16-1:0] M_adder1_b;
  reg [1-1:0] M_adder1_alufn;
  adder_16bit_1_5 adder1 (
    .a(M_adder1_a),
    .b(M_adder1_b),
    .alufn(M_adder1_alufn),
    .s(M_adder1_s)
  );
  
  wire [1-1:0] M_adder2_z;
  wire [1-1:0] M_adder2_v;
  wire [1-1:0] M_adder2_n;
  reg [16-1:0] M_adder2_a;
  reg [16-1:0] M_adder2_b;
  reg [16-1:0] M_adder2_s;
  adder_16bit_2_6 adder2 (
    .a(M_adder2_a),
    .b(M_adder2_b),
    .s(M_adder2_s),
    .z(M_adder2_z),
    .v(M_adder2_v),
    .n(M_adder2_n)
  );
  
  wire [16-1:0] M_bool_s;
  reg [16-1:0] M_bool_a;
  reg [16-1:0] M_bool_b;
  reg [6-1:0] M_bool_alufn;
  boolean_16bit_7 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .alufn(M_bool_alufn),
    .s(M_bool_s)
  );
  
  wire [16-1:0] M_shift_s;
  reg [16-1:0] M_shift_a;
  reg [4-1:0] M_shift_b;
  reg [6-1:0] M_shift_alufn;
  shifter_16bit_8 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn(M_shift_alufn),
    .s(M_shift_s)
  );
  
  wire [16-1:0] M_compare_s;
  reg [6-1:0] M_compare_alufn;
  reg [1-1:0] M_compare_z;
  reg [1-1:0] M_compare_v;
  reg [1-1:0] M_compare_n;
  compare16bit_9 compare (
    .alufn(M_compare_alufn),
    .z(M_compare_z),
    .v(M_compare_v),
    .n(M_compare_n),
    .s(M_compare_s)
  );
  
  always @* begin
    s[0+15-:16] = 1'h0;
    v[0+0-:1] = 1'h0;
    z[0+0-:1] = 1'h0;
    n[0+0-:1] = 1'h0;
    M_adder1_a[0+15-:16] = a[0+15-:16];
    M_adder1_b[0+15-:16] = b[0+15-:16];
    M_adder1_alufn = alufn[0+0-:1];
    M_adder2_a[0+15-:16] = a[0+15-:16];
    M_adder2_b[0+15-:16] = b[0+15-:16];
    M_adder2_s[0+15-:16] = M_adder1_s[0+15-:16];
    M_bool_a[0+15-:16] = a[0+15-:16];
    M_bool_b[0+15-:16] = b[0+15-:16];
    M_bool_alufn[0+5-:6] = alufn[0+5-:6];
    M_shift_a[0+15-:16] = a[0+15-:16];
    M_shift_b[0+3-:4] = b[0+3-:4];
    M_shift_alufn[0+5-:6] = alufn[0+5-:6];
    M_compare_alufn[0+5-:6] = alufn[0+5-:6];
    M_compare_z[0+0-:1] = M_adder2_z[0+0-:1];
    M_compare_v[0+0-:1] = M_adder2_v[0+0-:1];
    M_compare_n[0+0-:1] = M_adder2_n[0+0-:1];
    if (alufn[4+1-:2] == 1'h0) begin
      s[0+15-:16] = M_adder1_s[0+15-:16];
    end
    if (alufn[4+1-:2] == 1'h1) begin
      s[0+15-:16] = M_bool_s[0+15-:16];
    end
    if (alufn[4+1-:2] == 4'ha) begin
      s[0+15-:16] = M_shift_s[0+15-:16];
    end
    if (alufn[4+1-:2] == 4'hb) begin
      s[0+15-:16] = M_compare_s[0+15-:16];
    end
  end
endmodule
