/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    input [4:0] io_button,
    input [23:0] io_dip,
    input [15:0] b,
    input [5:0] alufn
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_alu_s;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_1 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .s(M_alu_s)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_btn_cond_out;
  reg [1-1:0] M_btn_cond_in;
  button_conditioner_3 btn_cond (
    .clk(clk),
    .in(M_btn_cond_in),
    .out(M_btn_cond_out)
  );
  wire [1-1:0] M_edge_dt_out;
  reg [1-1:0] M_edge_dt_in;
  edge_detector_4 edge_dt (
    .clk(clk),
    .in(M_edge_dt_in),
    .out(M_edge_dt_out)
  );
  localparam ADD_state = 5'd0;
  localparam SUB_state = 5'd1;
  localparam MUL_state = 5'd2;
  localparam CMPEQ_state = 5'd3;
  localparam CMPLT_state = 5'd4;
  localparam CMPLE_state = 5'd5;
  localparam OR_state = 5'd6;
  localparam NOR_state = 5'd7;
  localparam XOR_state = 5'd8;
  localparam A_state = 5'd9;
  localparam B_state = 5'd10;
  localparam AND_state = 5'd11;
  localparam NAND_state = 5'd12;
  localparam SHL_state = 5'd13;
  localparam SHLA_state = 5'd14;
  localparam SHR_state = 5'd15;
  localparam SHRA_state = 5'd16;
  localparam IDLE_state = 5'd17;
  localparam FAIL_state = 5'd18;
  localparam PASS_state = 5'd19;
  
  reg [4:0] M_state_d, M_state_q = ADD_state;
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    M_alu_a[0+7-:8] = io_dip[0+0+7-:8];
    M_alu_a[8+7-:8] = io_dip[8+0+7-:8];
    M_alu_b[0+15-:16] = b[0+15-:16];
    M_alu_alufn[0+5-:6] = alufn[0+5-:6];
    M_btn_cond_in = io_button[4+0-:1];
    M_edge_dt_in = M_btn_cond_out;
    io_led[0+0+7-:8] = M_alu_s[0+7-:8];
    io_led[8+0+7-:8] = M_alu_s[8+7-:8];
    M_counter_d = M_counter_q + 1'h1;
    if (M_counter_q[0+25-:26] == 1'h0) begin
      
      case (M_state_q)
        IDLE_state: begin
          if (io_button[4+0-:1] == 1'h1) begin
            M_state_d = ADD_state;
          end
        end
        ADD_state: begin
          M_alu_alufn[0+5-:6] = 1'h0;
          M_alu_a[0+15-:16] = 44'h92fd31e7313;
          M_alu_b[0+15-:16] = 10'h3e8;
          if (M_alu_s == 45'h092fd31e76fb) begin
            M_state_d = SUB_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
        SUB_state: begin
          M_alu_alufn[0+5-:6] = 1'h1;
          M_alu_a[0+15-:16] = 44'h92fd31e7313;
          M_alu_b[0+15-:16] = 10'h3e8;
          if (M_alu_s == 45'h092fd31e6f2b) begin
            M_state_d = MUL_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
        MUL_state: begin
          M_alu_alufn[0+5-:6] = 4'ha;
          M_alu_a[0+15-:16] = 4'hb;
          M_alu_b[0+15-:16] = 10'h3e8;
          if (M_alu_s == $signed(11'h423)) begin
            M_state_d = CMPEQ_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
        CMPEQ_state: begin
          M_alu_alufn[0+5-:6] = 17'h1adbb;
          M_alu_a[0+15-:16] = 4'hb;
          M_alu_b[0+15-:16] = 4'hb;
          if (M_alu_s == 1'h1) begin
            M_state_d = CMPLT_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
        CMPLT_state: begin
          M_alu_alufn[0+5-:6] = 17'h1ae1f;
          M_alu_a = 4'hb;
          M_alu_b = 7'h6f;
          if (M_alu_s == 1'h1) begin
            M_state_d = CMPLE_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
        CMPLE_state: begin
          M_alu_alufn[0+5-:6] = 17'h1ae15;
          M_alu_a = 4'hb;
          M_alu_b = 17'h18a93;
          if (M_alu_s == 1'h1) begin
            M_state_d = OR_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
        OR_state: begin
          M_alu_alufn[0+5-:6] = 14'h2b66;
          M_alu_a = 24'ha98ac7;
          M_alu_b = 37'h19de137b57;
          if (M_alu_s == 37'h19debd01c7) begin
            M_state_d = NOR_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
        NOR_state: begin
          M_alu_alufn[0+5-:6] = 14'h2711;
          M_alu_a = 24'ha98ac7;
          M_alu_b = 37'h19de137b57;
          if (M_alu_s == 50'h3f272d8587000) begin
            M_state_d = XOR_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
        XOR_state: begin
          M_alu_alufn[0+5-:6] = 14'h277e;
          M_alu_a = 24'ha98ac7;
          M_alu_b = 37'h19de137b57;
          if (M_alu_s == 37'h19debcfd70) begin
            M_state_d = A_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
        A_state: begin
          M_alu_alufn[0+5-:6] = 14'h2b02;
          M_alu_a = 24'ha98ac7;
          M_alu_b = 37'h19de137b57;
          if (M_alu_s == 24'ha98ac7) begin
            M_state_d = B_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
        B_state: begin
          M_alu_alufn[0+5-:6] = 14'h2b5c;
          M_alu_a = 24'ha98ac7;
          M_alu_b = 37'h19de137b57;
          if (M_alu_s == 37'h19de137b57) begin
            M_state_d = AND_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
        AND_state: begin
          M_alu_alufn[0+5-:6] = 14'h2af8;
          M_alu_a = 24'ha98ac7;
          M_alu_b = 37'h19de137b57;
          if (M_alu_s == 11'h457) begin
            M_state_d = NAND_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
        NAND_state: begin
          M_alu_alufn[0+5-:6] = 14'h277f;
          M_alu_a = 24'ha98ac7;
          M_alu_b = 37'h19de137b57;
          if (M_alu_s == 50'h3f28cb7156d70) begin
            M_state_d = SHL_state;
          end else begin
            M_state_d = FAIL_state;
          end
        end
      endcase
    end
    
    case (M_state_q)
      IDLE_state: begin
        io_led[16+6+1-:2] = 1'h1;
      end
      ADD_state: begin
        io_led[16+1+0-:1] = 1'h1;
      end
      SUB_state: begin
        io_led[16+2+0-:1] = 1'h1;
      end
      MUL_state: begin
        io_led[16+3+0-:1] = 1'h1;
      end
      CMPEQ_state: begin
        io_led[16+4+0-:1] = 1'h1;
      end
      CMPLT_state: begin
        io_led[16+5+0-:1] = 1'h1;
      end
      CMPLE_state: begin
        io_led[16+6+0-:1] = 1'h1;
      end
      OR_state: begin
        io_led[16+7+0-:1] = 1'h1;
      end
      NOR_state: begin
        io_led[16+0+0-:1] = 1'h1;
        io_led[16+1+0-:1] = 1'h1;
      end
      XOR_state: begin
        io_led[16+0+0-:1] = 1'h1;
        io_led[16+2+0-:1] = 1'h1;
      end
      A_state: begin
        io_led[16+0+0-:1] = 1'h1;
        io_led[16+3+0-:1] = 1'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
    
    M_counter_q <= M_counter_d;
  end
  
endmodule
