module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    //input a[16],
    input b[16],
    input alufn[6]
  ) {
  
  sig rst;
  
  alu alu;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner btn_cond;
    edge_detector edge_dt(#RISE(1),#FALL(0));
    .rst(rst) {
      fsm state = {
      ADD, SUB, 
      CMPEQ, CMPLT, CMPLE, 
      OR, NOR, XOR, A, B, AND, NAND, 
      SHL, SHLA, SHR, SHRA, 
      IDLE, FAIL, PASS};
    }
    dff counter[28];
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    
    alu.a[7:0] = io_dip[0][7:0];
    alu.a[15:8] = io_dip[1][7:0];
    alu.b[15:0] = b[15:0];
    alu.alufn[5:0] = alufn[5:0];
    
    btn_cond.in=io_button[4];
    edge_dt.in=btn_cond.out;
    
    io_led[0][7:0] = alu.s[7:0];
    io_led[1][7:0] = alu.s[15:8];
    
    counter.d = counter.q + 1;
  
    if (counter.q[25:0]==0){
    
      case(state.q){
      
        state.IDLE:
          if (io_button[4]==1){
            state.d = state.ADD;
          }
          
        state.ADD:
          alu.alufn[5:0]=000000;
          alu.a[15:0]=0010101010101011;
          alu.b[15:0]=0000000000001000;
          if (alu.s==0010101010101011+0000000000001000){
            state.d = state.SUB;
          }
          else{
            state.d = state.FAIL;
          }  
            
        state.SUB:
          alu.alufn[5:0]=000001;
          alu.a[15:0]=0010101010101011;
          alu.b[15:0]=0000000000001000;
          if (alu.s==0010101010101011-0000000000001000){
            state.d = state.CMPEQ;
          }
          else{
            state.d = state.FAIL;
          }  
         
      
      }
    }
    case(state.q){
      
      state.IDLE:
        io_led[2][7]=1;
        
        
    }
  }
}