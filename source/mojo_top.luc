module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    
    //input a[16],
    input b[16],
    input alufn[6]
  ) {
  
  sig rst;
  
  alu alu;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner btn_cond;
    edge_detector edge_dt(#RISE(1),#FALL(0));
    .rst(rst) {
      fsm state = {
      IDLE,
      ADD, SUB, MUL,
      CMPEQ, CMPLT, CMPLE, 
      OR, NOR, XOR, A, B, AND, NAND, 
      SHL, SHLA, SHR, SHRA, 
      FAIL, PASS};
    }
    dff counter[28];
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    
    alu.a[7:0] = io_dip[0][7:0];
    alu.a[15:8] = io_dip[1][7:0];
    alu.b[15:0] = b[15:0];
    alu.alufn[5:0] = alufn[5:0];
    
    btn_cond.in=io_button[4];
    edge_dt.in=btn_cond.out;
    
    io_led[0][7:0] = alu.s[7:0];
    io_led[1][7:0] = alu.s[15:8];
    
    counter.d = counter.q + 1;
  
    if (counter.q[25:0]==0){
    
      case(state.q){
      
        state.IDLE:
          if (io_button[4]==1){
            state.d = state.ADD;
          }
          
        state.ADD:
          alu.alufn[5:0]=b000000;
          alu.a[15:0]=b0010101010101011;
          alu.b[15:0]=b0000000000001000;
          if (alu.s==b0010101010110011){
            state.d = state.SUB;
          }
          else{
            state.d = state.FAIL;
          }  
            
        state.SUB:
          alu.alufn[5:0]=b000001;
          alu.a[15:0]=b0010101010101011;
          alu.b[15:0]=b0000000000001000;
          if (alu.s==b0010101010100011){
            state.d = state.MUL;
          }
          else{
            state.d = state.FAIL;
          }  
          
        state.MUL:
          alu.alufn[5:0]=000010;
          alu.a[15:0]=b0000000000000011;
          alu.b[15:0]=b0000000000000001;
          if (alu.s==b0000000000000011){
            state.d = state.CMPEQ;
          }
          else{
            state.d = state.FAIL;
          }  
          
        state.CMPEQ:
          alu.alufn[5:0]=110011;
          alu.a[15:0]=b0000000000000011;
          alu.b[15:0]=b0000000000000011;
          if (alu.s==b0000000000000001){
            state.d = state.CMPLT;
          }
          else{
            state.d = state.FAIL;
          }   
          
        state.CMPLT:
          alu.alufn[5:0]=110101;
          alu.a=b0000000000000011;
          alu.b=b0000000000000111;
          if (alu.s==b0000000000000001){
            state.d = state.CMPLE;
          }
          else{
            state.d = state.FAIL;
          }

        state.CMPLE:
          alu.alufn[5:0]=110111;
          alu.a=b0000000000000011;
          alu.b=b0000000000101011;
          if (alu.s==b0000000000000001){
            state.d = state.OR;
          }
          else{
            state.d = state.FAIL;
          }

        state.OR:
          alu.alufn[5:0]=011110;
          alu.a=b0000000011111111;
          alu.b=b0000111100001111;
          if (alu.s==b0000111111111111){
            state.d = state.NOR;
          }
          else{
            state.d = state.FAIL;
          }

        state.NOR:
          alu.alufn[5:0]=010001;
          alu.a=b0000000011111111;
          alu.b=b0000111100001111;
          if (alu.s==b1111000000000000){
            state.d = state.XOR;
          }
          else{
            state.d = state.FAIL;
          }

        state.XOR:
          alu.alufn[5:0]=010110;
          alu.a=b0000000011111111;
          alu.b=b0000111100001111;
          if (alu.s==b0000111111110000){
            state.d = state.A;
          }
          else{
            state.d = state.FAIL;
          }

        state.A:
          alu.alufn[5:0]=011010;
          alu.a=b0000000011111111;
          alu.b=b0000111100001111;
          if (alu.s==b0000000011111111){
            state.d = state.B;
          }
          else{
            state.d = state.FAIL;
          }

        state.B:
          alu.alufn[5:0]=011100;
          alu.a=b0000000011111111;
          alu.b=b0000111100001111;
          if (alu.s==b0000111100001111){
            state.d = state.AND;
          }
          else{
            state.d = state.FAIL;
          }

        state.AND:
          alu.alufn[5:0]=011000;
          alu.a=b0000000011111111;
          alu.b=b0000111100001111;
          if (alu.s==b0000000000001111){
            state.d = state.NAND;
          }
          else{
            state.d = state.FAIL;
          }

        state.NAND:
          alu.alufn[5:0]=010111;
          alu.a=b0000000011111111;
          alu.b=b0000111100001111;
          if (alu.s==b1111111111110000){
            state.d = state.SHL;
          }
          else{
            state.d = state.FAIL;
          }

        state.SHL:
          alu.alufn[5:0]=010111;
          alu.a=b0000000000000001;
          alu.b=b0000000000000001;
          if (alu.s==b0000000000000010){
            state.d = state.SHLA;
          }
          else{
            state.d = state.FAIL;
          }

        state.SHLA:
          alu.alufn[5:0]=010111;
          alu.a=b0000000000000001;
          alu.b=b0000000000000001;
          if (alu.s==b0000000000000010){
            state.d = state.SHR;
          }
          else{
            state.d = state.FAIL;
          }

        state.SHR:
          alu.alufn[5:0]=010111;
          alu.a=b1000000000000010;
          alu.b=b0000000000000001;
          if (alu.s==b0100000000000001){
            state.d = state.SHRA;
          }
          else{
            state.d = state.FAIL;
          }

        state.SHRA:
          alu.alufn[5:0]=010111;
          alu.a=b1000000000000010;
          alu.b=b0000000000000001;
          if (alu.s==b1100000000000001){
            state.d = state.PASS;
          }
          else{
            state.d = state.FAIL;
          }
      }
    }
    case(state.q){
      
      state.IDLE:
        io_led[2][7:6]=11;
        
      state.ADD:
        io_led[0][0]=1;
        
      state.SUB:
        io_led[0][1]=1;
        
      state.MUL:
        io_led[0][2]=1;      
        
      state.CMPEQ:
        io_led[0][3]=1;  
        
      state.CMPLT:
        io_led[0][4]=1;  
        
      state.CMPLE:
        io_led[0][5]=1;
        
      state.OR:
        io_led[0][6]=1;
            
      state.NOR:
        io_led[0][7]=1;
        
      state.XOR:
        io_led[1][0]=1;
        
      state.A:
        io_led[1][1]=1;   
        
      state.B:
        io_led[1][2]=1;
        
      state.AND:
        io_led[1][3]=1;
        
      state.NAND:
        io_led[1][4]=1;       
        
      state.FAIL:
        io_led[2][7:4]=1111;   
        
      state.PASS:
        io_led[2][3:0]=1111;  
    }
  }
}