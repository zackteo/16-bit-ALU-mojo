module alu (
    input a[16],
    input b[16],
    input alufn[6],
    output s[16],
    output z,
    output n,
    output v
  ) {

  adder_16bit adder;
  boolean_16bit bool;
  shifter_16bit shift;
  compare16bit compare;
  multiply_16bit mul;
  
  always {
    //Assign all output to 0
    s[15:0] = 0;
    v = 0;
    n = 0;
    z = 0;
    
    //ADD & SUB
    adder.a[15:0] = a[15:0];
    adder.b[15:0] = b[15:0];
    adder.alufn[0] = alufn[0];
    
    //MUL
    mul.a[15:0] = a[15:0];
    mul.b[15:0] = b[15:0];
    
    //BOOL
    bool.a[15:0] = a[15:0];
    bool.b[15:0] = b[15:0];
    bool.alufn[3:0] = alufn[3:0];
    
    //SHIFT
    shift.a[15:0] = a[15:0];
    shift.b[3:0] = b[3:0];
    shift.alufn[1:0] = alufn[1:0];
    
    //COMPARE
    compare.alufn[5:0] = alufn[5:0];
    compare.z = adder2.z;
    compare.v = adder2.v;
    compare.n = adder2.n;
    
    
    //Choosing output
    if(alufn[5:4] == b00)
    {
      if (alufn[1]==0){
        s[15:0] = adder.s[15:0];
      }
      if (alufn[1]==1){
        s[15:0] = mul.s[15:0];
      }
      z = adder.z;
      v = adder.v;
      n = adder.n;
    }
    
    if(alufn[5:4] == b01)
    {
        s[15:0] = bool.s[15:0];
    }
    
    if(alufn[5:4] == b10)
    {
        s[15:0] = shift.s[15:0];
    }
    
    if(alufn[5:4] == b11)
    {
        s[15:0] = compare.s[15:0];
    }
  }
}
